name: MCP Security Validation

on:
  pull_request:
  workflow_dispatch:

jobs:
  mcp-security:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    env:
      MCP_SERVER_URL: "http://172.28.0.12:8000/call_tool"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests jq

      - name: Download MCP server reference
        run: |
          curl -o mcp_server.py https://raw.githubusercontent.com/rymarinelli/MPC_OWASP_POC/main/mcp_server.py

      - name: Run MCP scan_repo (remote)
        id: scan
        run: |
          python - << 'PY'
          import json, urllib.request, os
          MCP_URL = os.getenv("MCP_SERVER_URL", "http://172.28.0.12:8000/call_tool")
          payload = {
              "tool_name": "scan_repo",
              "params": {
                  "repo_path": ".",
                  "semgrep_config": "p/ci",
                  "llm_proposal": True
              }
          }
          data = json.dumps(payload).encode("utf-8")
          req = urllib.request.Request(
              MCP_URL,
              data=data,
              headers={"Content-Type": "application/json"},
              method="POST",
          )
          print(f"Calling MCP server at {MCP_URL} ...")
          with urllib.request.urlopen(req) as resp:
              result = json.loads(resp.read().decode("utf-8"))
          with open("mcp_scan.json", "w") as f:
              json.dump(result, f, indent=2)
          print("Scan complete.")
          PY

      - name: Comment on PR with MCP report
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COUNT=$(jq -r '.findings | length' mcp_scan.json)
          REPORT=$(jq -r '.llm_proposal' mcp_scan.json)
          MODEL=$(jq -r '.model_used // "N/A"' mcp_scan.json)

          cat << 'EOF' > body.md
### MCP Security Validation
**Server:** http://172.28.0.12:8000
EOF

          {
            echo "**Findings:** ${COUNT}"
            echo "**Model:** ${MODEL}"
            echo
            echo "**Proposed remediation (LLM):**"
            echo '```'
            echo "${REPORT}"
            echo '```'
          } >> body.md

          gh pr comment ${{ github.event.pull_request.number }} --body-file body.md

      - name: Show MCP scan output
        if: always()
        run: |
          echo "mcp_scan.json:"
          cat mcp_scan.json || true
